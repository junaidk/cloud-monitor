package cloudman

import (
	"context"
	"github.com/digitalocean/godo"
	"golang.org/x/oauth2"
	"strconv"
	"strings"
)

type DOCloud struct {
	credentials DOCredentials
	client      *godo.Client
}

// first login using gcloud cli
// use autogenerated credentials from cli to authenicate as acount level
type TokenSource struct {
	AccessToken string
}

func (t *TokenSource) Token() (*oauth2.Token, error) {
	token := &oauth2.Token{
		AccessToken: t.AccessToken,
	}
	return token, nil
}
func NewDOCloud(c DOCredentials) *DOCloud {

	tokenSource := &TokenSource{
		AccessToken: c.AccessToken,
	}

	oauthClient := oauth2.NewClient(context.Background(), tokenSource)
	client := godo.NewClient(oauthClient)

	out := DOCloud{
		credentials: c,
		client:      client,
	}

	return &out

}

type DOCredentials struct {
	AccessToken string
}

func (c *DOCloud) GetInstanceListAllRegions() ([]InstanceListResponse, error) {

	out, err := c.GetInstanceList("")
	return out, err
}

func (c *DOCloud) GetInstanceList(project string) ([]InstanceListResponse, error) {

	droplets, _, err := c.client.Droplets.List(context.Background(), &godo.ListOptions{
		Page:    0,
		PerPage: 100,
	})

	if err != nil {
		return nil, err
	}

	var res []InstanceListResponse

	for _, droplet := range droplets {

		obj := InstanceListResponse{
			Name:        droplet.Name,
			Id:          strconv.Itoa(int(droplet.ID)),
			Status:      droplet.Status,
			LaunchDate:  droplet.Created,
			Region:      droplet.Region.Name,
			MachineType: droplet.Size.Slug,
			Project:     "",
		}
		res = append(res, obj)
	}

	return res, nil
}

// split and extract last part or uri
// e.g https://www.googleapis.com/compute/v1/projects/cloudplex-infrastructure/zones/us-central1-b
func (c *DOCloud) extract(in string) string {

	out := strings.Split(in, "/")
	if len(out) > 0 {
		return out[len(out)-1]
	} else {
		return in
	}
}

func (c *DOCloud) GetInstanceDetails() {

}
