package cloudman

import (
	"bytes"
	"encoding/json"
	"gopkg.in/resty.v1"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
)

type IBMCloud struct {
	credentials IBMCredentials
}

const (
	IBM_Kube_GetCluster_Endpoint = "https://containers.cloud.ibm.com/global/v2/vpc/getClusters"
	IBM_Kube_GetWorkers_Endpoint = "https://containers.cloud.ibm.com/global/v2/vpc/getWorkers"
	IBM_Kube_GetWorker_Endpoint  = "https://containers.cloud.ibm.com/global/v2/vpc/getWorker"
	IBM_IAM_Endpoint             = "https://iam.cloud.ibm.com/identity/token"
	Ibm_Resource_Manager         = "https://resource-controller.cloud.ibm.com/v2/resource_groups"
)

// first login using gcloud cli
// use autogenerated credentials from cli to authenicate as acount level
func NewIBMCloud(c IBMCredentials) *IBMCloud {

	payloadSlice := "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=" + c.APIKey
	res, err := http.Post(IBM_IAM_Endpoint, "application/x-www-form-urlencoded", bytes.NewBuffer([]byte(payloadSlice)))
	if err != nil {
		log.Println(err)
	}
	if res.StatusCode != 200 {
		log.Println("resp code not 200")
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Println(err)
	}
	var token Token
	err = json.Unmarshal(body, &token)
	if err != nil {
		log.Println(err)
	}
	creds := IBMCredentials{
		APIKey:       c.APIKey,
		iamToken:     token.TokenType + " " + token.AccessToken,
		refreshToken: token.RefreshToken,
	}
	out := IBMCloud{
		credentials: creds,
	}

	return &out

}

type Token struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	TokenType    string `json:"token_type"`
	ExpiresIn    int    `json:"expires_in"`
	Expiration   int    `json:"expiration"`
	Scope        string `json:"scope"`
}

type IBMCredentials struct {
	APIKey       string
	iamToken     string
	refreshToken string
}

func (c *IBMCloud) GetInstanceListAllRegions() ([]InstanceListResponse, error) {

	ibmClient := resty.New()

	m := make(map[string]string)

	m["Content-Type"] = "application/json"
	m["Accept"] = "application/json"
	m["Authorization"] = c.credentials.iamToken

	resp, err := ibmClient.
		SetRedirectPolicy(resty.FlexibleRedirectPolicy(20)).
		R().
		SetHeaders(m).
		Get(IBM_Kube_GetCluster_Endpoint)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	//log.Println(string(resp.Body()))

	var clusters []kCluster
	err = json.Unmarshal(resp.Body(), &clusters)
	if err != nil {
		log.Println(err)
		return nil, err
	}

	log.Println(clusters)

	var out []InstanceListResponse
	recvChan := make(chan []InstanceListResponse, len(clusters))

	for _, cluster := range clusters {
		go func(cls kCluster) {
			res, _ := c.GetInstanceList(cls.ID)
			addClusterData(res, cls.CreatedDate, cls.Name)
			recvChan <- res
		}(cluster)
	}

	for j := 0; j < len(clusters); j++ {
		list := <-recvChan
		out = append(out, list...)
	}

	return out, nil
}

func addClusterData(list []InstanceListResponse, date, cname string) {
	for i, item := range list {
		item.LaunchDate = date
		item.Project = cname
		list[i] = item
	}
}

func (c *IBMCloud) GetInstanceList(cid string) ([]InstanceListResponse, error) {

	ibmClient := resty.New()

	m := make(map[string]string)

	m["Content-Type"] = "application/json"
	m["Accept"] = "application/json"
	m["Authorization"] = c.credentials.iamToken

	resp, err := ibmClient.
		SetRedirectPolicy(resty.FlexibleRedirectPolicy(20)).
		R().
		SetHeaders(m).
		SetQueryParam("cluster", cid).
		SetQueryParam("showDeleted", "false").
		Get(IBM_Kube_GetWorkers_Endpoint)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	//log.Println(string(resp.Body()))

	var workers = []kWorker{}
	err = json.Unmarshal(resp.Body(), &workers)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	//log.Println(workers)
	//c.GetWorkerDetails(workers[0].Id, cid)
	var instList []InstanceListResponse
	for _, worker := range workers {

		t := strings.Split(worker.Id, "-")
		name := t[len(t)-1]
		inst := InstanceListResponse{
			Name:        name,
			Id:          worker.Id,
			Status:      worker.Health.State,
			LaunchDate:  "",
			Region:      worker.Location,
			MachineType: worker.Flavor,
			Project:     "",
		}
		instList = append(instList, inst)

	}
	return instList, nil
}
func (c *IBMCloud) GetWorkerDetails(wid, cid string) {

	ibmClient := resty.New()

	m := make(map[string]string)

	m["Content-Type"] = "application/json"
	m["Accept"] = "application/json"
	m["Authorization"] = c.credentials.iamToken

	resp, err := ibmClient.
		SetRedirectPolicy(resty.FlexibleRedirectPolicy(20)).
		R().
		SetHeaders(m).
		SetQueryParam("cluster", cid).
		SetQueryParam("worker", wid).
		Get(IBM_Kube_GetWorker_Endpoint)

	if err != nil {
		log.Println(err)
		return
	}

	log.Println(string(resp.Body()))

	var w kWorker

	err = json.Unmarshal(resp.Body(), &w)
	if err != nil {
		log.Println(err)
		return
	}
	log.Println(w)

}

func (c *IBMCloud) GetInstanceDetails() {

}

type kCluster struct {
	CreatedDate   string `json:"createdDate"`
	Name          string `json:"name"`
	ID            string `json:"id"`
	Location      string `json:"location"`
	State         string `json:"state"`
	WorkerCount   int    `json:"workerCount"`
	ResourceGroup string `json:"resourceGroup"`
}

type kWorker struct {
	Id       string   `json:"id"`
	Location string   `json:"location"`
	Flavor   string   `json:"flavor"`
	Health   kwHealth `json:"health"`
}
type kwHealth struct {
	Message string `json:"message"`
	State   string `json:"state"`
}
